openapi: 3.1.0
info:
  title: Juno Memory API
  description: API for querying Junk Kouture knowledge base using vector embeddings
  version: 1.0.0
servers:
  - url: https://juno-backend-7lj5.onrender.com
paths:
  /query:
    post:
      operationId: queryKnowledgeBase
      summary: Query the Juno knowledge base
      description: Searches the embedded knowledge base and returns AI-generated answers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: The user's question or search query
                  example: "What are the rules for Junk Kouture competition?"
              required:
                - query
      responses:
        '200':
          description: AI-generated answer based on knowledge base content
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    type: string
                    description: AI-generated answer based on knowledge base content
                    example: "According to the competition handbook, participants must..."
                  sources:
                    type: array
                    description: List of sources used to generate the answer
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: Source name
                        similarity:
                          type: number
                          description: Similarity score
                        rank:
                          type: integer
                          description: Source ranking
                  confidence:
                    type: string
                    description: Confidence level of the answer
                    enum: [high, medium, low]
                  context_used:
                    type: integer
                    description: Number of content chunks used
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string

  /get-content:
    get:
      operationId: getNotionContent
      summary: Get specific Notion page content
      description: Retrieves content from a specific Notion page by title
      parameters:
        - name: page_name
          in: query
          required: true
          description: Title of the Notion page to retrieve
          schema:
            type: string
            example: "Competition Rules"
      responses:
        '200':
          description: Notion page content retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: string
                    description: Raw content from the Notion page
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string

  /ping:
    get:
      operationId: pingHealthCheck
      summary: Health check endpoint
      description: Simple endpoint to check if the API is running
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
  /upload_file:
    post:
      operationId: uploadFileToNotion
      summary: Upload a file to Supabase and attach it to a Notion page
      description: Receives a file and uploads it to Supabase, then attaches a reference to a Notion page
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filename:
                  type: string
                  description: Name of the file to upload (e.g., "brief.md")
                file_content:
                  type: string
                  description: The file content in plain text
                notion_page_name:
                  type: string
                  description: The Notion page to attach the file to
              required:
                - filename
                - file_content
                - notion_page_name
      responses:
        '200':
          description: File uploaded and attached to Notion page
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  url:
                    type: string
                    description: Public URL of the uploaded file
                  notion_page:
                    type: string
                    description: The Notion page the file was attached to
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
  /save_chat:
    post:
      operationId: saveChatTranscript
      summary: Save a chat or interview as a markdown transcript and upload to Notion and Supabase
      description: Saves a chat conversation to a markdown file and stores it in Notion and/or Supabase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  type: string
                  description: Unique identifier for the chat, used as filename
                messages:
                  type: array
                  description: List of chat messages
                  items:
                    type: object
                    properties:
                      role:
                        type: string
                        enum: [user, assistant]
                      content:
                        type: string
                    required:
                      - role
                      - content
                destination:
                  type: string
                  enum: [notion, supabase, both]
                  default: notion
                notion_page_name:
                  type: string
                  description: The Notion page to upload the transcript to
              required:
                - chat_id
                - messages
                - notion_page_name
      responses:
        '200':
          description: Chat successfully saved and uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  saved_as:
                    type: string
                    description: Name of the saved markdown file
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
components:
  schemas: {}
security: []